#!./bcl compile --run --emit-binary
import stdlib::*;

// import SDL;

// define main() -> i32 {
//     if SDL_Init(32) < 0 {
//         println("Failed to initialize sdl2");
//         return -1;
//     }

//     window: &SDL_Window = SDL_CreateWindow("SDL2 Window",
//                                           805240832,
//                                           805240832,
//                                           680, 480,
//                                           0);

//     window_surface: &SDL_Surface = SDL_GetWindowSurface(window);

//     SDL_UpdateWindowSurface(window);

//     SDL_Delay(10000);

//     // event = SDL_Event {
//     //         type: ' ',
//     //         active: [' ';3], 
//     //         key: [' ';7], // 2, 1, 1, 1, 2
//     //         motion: [' ';6],
//     //         button: [' ';5],
//     //         jaxis: [' ';5], 
//     //         jball: [' ';5], 
//     //         jhat: [' ';4],
//     //         jbutton: [' ';4],
//     //         resize: [' ';5], 
//     //         expose: ' ', 
//     //         quit: ' ', 
//     //         user: [' ';13], // 1, 4, 8, 8 
//     //         syswm: [' ';9]
//     //     };

//     return 0;
// }

import math::*;
import optional::*;

define tests() -> f32 {
    return 934f;
}

define takes_tuple(x: &(i32, i32)) -> i32 {
    return x[0] + x[1];
}

struct TestStruct {
    x: i32,
    y: i32;

    define test() -> char {
        return 'F';
    }

    define goof_function(x: i32) -> i32 {
        return x;
    }

    define testing(self) {
        println("gaming");
        println(self.x);
    }

    define tests(&self, x: i32) {
        self.testing();
        self.x = x;
        println(self.x);
        println();
    }

    define __add__(self, x: i32) -> TestStruct {
        return TestStruct {x: (self.x+x), y: self.y};
    }

    define __iadd__(&self, other: i32) {
        self.x += other;
    }

    define __iadd__(&self, other: TestStruct) {
        self.x += other.x;
    }

    define __eq__(self, other: i32) -> bool {
        return self.x == other;
    }
}

struct Wrapper {
    x: TestStruct;
}

define test_gen(w: i32) -> (i32, i32) {
    yield (420, 420);
    yield (421, 420);
    yield (422, 420);
    yield (423, 420);

    if false {
        yield (69, 0);
    }
//     for i in 0..12 {
//         for i2 in 0..5 {
//             yield (i, i2);
//         }
//     }
//     return;
//     yield (420, 0);
}

define gaming_test_function() -> i32 {
    if false {
        return 12;
    } else if true{
        return 13;
    } else {
        return 54;
    }
}

// define malloc(size_bytes: size_t) -> UntypedPointer;
// define free(ptr: UntypedPointer);

enum TestEnum {
    ONE,
    TWO,
    THREE: 4,
    FIVE,
    SIX,
    SEVEN: 11;
}

enum Flags {
    A: 1,
    B: 2,
    C: 3;
}

import test;


struct Gumby::<T, U> {
    one: T,
    two: U;
    define new() -> Gumby::<T, U>{
        return Gumby::<T, U> {
            one: 12,
            two: 69
        };
    }
}

define get_value() -> Optional::<i32> {
    x = random();
    if x > i32::MAX / 2 {
        return Optional::<i32>::wrap(x);
    }

    return Optional::<i32>::none();
}

import box::*;
import vector::*;

define random_box_test(my_arg: &Box::<i64>) -> Box::<i64> {
    return *my_arg;
}

struct ContainsBox {
    x: &Box::<i64>;

    define __dispose__(self) {
        println("DISPOSING AND POSING");
    }
}

define main() {
    println("started");

    example_vec: Vector::<i64> = Vector::<i64>::new(10i64);

    example_vec.append(12i64);
    example_vec.append(2i64);
    example_vec.put(0i64, 10i64);
    test_val = example_vec.get(0i64);
    test_val_2 = example_vec.get(1i64);


    print("Vec value: ");
    println(test_val);

    print("Vec value 2: ");
    println(test_val_2);

    // example_vec.pop(0i64);

    test_val = example_vec.get(0i64);

    print("Vec value: ");
    println(test_val);

    // // should error at runtime
    test_val = example_vec.get(1i64);

    print("Vec value: ");
    println(test_val);

    // while example_vec.length() {

    // }
    p = example_vec.iter();
    // example_vec::SIZEOF;

    for item in example_vec.iter() {
        println(item);
    }


    j = Box::<i64>::new(10i64);
    Box::<i64>::new(10i64);
    OhNo = ContainsBox {
        x: &j
    };

    // box_array = [Box::<i32>::new(10); 10];

    // box_in_a_box = Box::<Box::<i32>>::new(j);

    // for x in box_array {
    //     println(x.unwrap());
    // }

    // println("running func");
    // j = random_box_test(&j);

    // println(j.unwrap());

    // j.wrap(69);

    // println(j.unwrap());

    println();
    println();

    // j = Box::<i32>::new(15);

    println();
    println();

    // box2 = my_box;

    // println(TestEnum::ONE as i32);
    // println(TestEnum::TWO as i32);
    // println(TestEnum::THREE as i32);
    // println(TestEnum::FIVE as i32);
    // println(TestEnum::SIX as i32);
    // println(TestEnum::SEVEN as i32);
    // println(i32::MAX);
    // println(i32::MIN);
    // Gumby::<i32, i32>::new();
    println(Gumby::<i32, i32>::SIZEOF as i32);

    // srandom(59548548892080984);

    // for _ in 0..20 {
    //     my_optional_value = get_value();
    //     val = my_optional_value.unwrap_or(0);
    //     print("RANDOM VALUE ");
    //     println(val);
    // }

    println("--------------------------------");
    println("Testing bitwise ops on integers");
    println();
    test::assert((12<<1)==24, "Right shift is broken");
    test::assert((12>>1)==6, "Left shift is broken");
    test::assert((12<<1>>1)==12, "Right + Left shift doesn't yield original value?");
    test::assert((1u8|1u8)==1u8, "Bitwise or is broken");
    test::assert((3u8^1u8)==2u8, "Bitwise xor is broken");
    test::assert((3u8&1u8)==1u8, "Bitwise and is broken");
    test::assert((~1u8)==254, "Bitwise not is broken");


    println();
    println("SUCCESS");
    println("--------------------------------");
    println("Testing bitwise ops on enums");
    println();

    test::assert((Flags::A<<1)==2, "Left shift is broken");
    test::assert((Flags::B>>1)==1, "Right shift is broken");
    test::assert((Flags::A|Flags::B)==3u8, "Bitwise or is broken");
    test::assert((Flags::A|5)==5u8, "Bitwise or is broken (2)");
    test::assert((Flags::A^Flags::C)==2u8, "Bitwise xor is broken");
    test::assert((Flags::A^3)==2u8, "Bitwise xor is broken (2)");
    test::assert((Flags::A&Flags::C)==1u8, "Bitwise and is broken");
    test::assert((Flags::A&3)==1u8, "Bitwise and is broken (2)");
    test::assert((~Flags::A)==254u8, "Bitwise not is broken");


    println();
    println("SUCCESS");
    println("--------------------------------");
    println();


    define create_data(c: i32) -> i32 {
        for x in 0..c {
            yield x;
        }
    }

    define testing_stuff(j: i64) {
        println(j);
    }

    testing_stuff(29i64);
    println(18f32);

    println(16**0.5);
    println(20**3f); // 26

    lmnop = Wrapper {x: TestStruct {x: 12, y: 10}};
    joty = lmnop.x;
    joty + 10;
    lmnop.x + 10; //32
    println(TestStruct::test()); //33
    // TestStruct;
    println();
    20.println();


    t = create_data(23);
    println(120583.TestStruct::goof_function());

    x = [t.next(); 3]; //38

    pointer = malloc(i32::SIZEOF * 2); // UntypedPointer

    ahead = pointer[i32::SIZEOF] as &i32;

    ahead = 34500000;

    i32_p = pointer as &i32;
    i32_p = 12;
    println(i32_p as i32); //30-31 +9 // 41
    i32_p = 69420;
    println(i32_p as i32);

    println(ahead as i32);

    // println(x);
    free(pointer); //45

    // println 10;
    // m = TestStruct {x: 123, y: 1232};
    // printf("m.x: %i\n", m.x);
    // m += m;
    // println(m.test());
    // m.testing();
    // println();
    // m.tests(69420);
    // // printf("m.x: %i\n", m.x);
    // // j = m + 12000;
    // // printf("value of j.x: %i\n", j.x);

    // p = 0..10;
    // // p.end += 12;

    // // since P is the same range object each time, this
    // // for loop acts weird

    // for x in p {
    //     for y in p {
    //         printf("%i %i\n", x, y);
    //     }
    // }

    // println takes_tuple(&(2, 2));

    // my_array = [0, 2, 4, 6, 8, 10, 12];
    // for x in my_array {
    //     printf("Got %i from array: \"my_array\"\n", x);
    //     x = 12;
    // }

    // for x in test_gen(2) {
    //     print x[0];
    //     print " WOWO ";
    //     println x[1];
    // }
    // mp = test_gen(2);
    // lmnop = [m.test(); 5];

    // println(mp.next()[0]);
    // println(mp.next()[0]);
    // println(mp.next()[0]);
    // println(mp.next()[0]);
    // println(mp.next()[0]);



    // range = 0..10;
    // for i in range {
    //     range = 0..(range.end - i*2);
    //     println(i);
    // }

    // m.test = 11;

    // x = [1232; 1292];
    // println(x.length);
    // (22f, 7f).min();
    // (10).print();

    // println(factorial(4));
    // println(min(22, 7));
    // println(max(22, 4));
    // println(min(22f, 7f));
    // println(max(22f, 4f));
    // println(tests());

    // println();
    // println(8 and 3);
    // println(0 and 12);
    // if 0 {
    //     println("hola");
    // } else

    // if (10f>9) * 2f {
    //     println("hi");
    // }
    println("END");
}

// struct parent {
//     x: test,
//     y: test;
// }

// struct test {
//     x: i32,
//     y: i32;
// }

// struct gross {
//     x: &i32,
//     y: i32;
// }

// // define testing(x: test) -> gross {
// //     referencable = x.y;
// //     value = gross {x: &(x.y), y: x.x};
// //     return value;
// // }

// define main() {
//     // (10) = true;
//     x = parent {
//         x: test {x: 1, y: 2},
//         y: test {x: 3, y: 4}
//     };
//     // x.x.x = 8;
//     // x.y.z;
//     println(x.x.x); // completely inapropriate! XXX content in my code?!
//     println(8+x.y.x); //should be 11
// }