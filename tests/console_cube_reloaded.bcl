// ==================================================================
// Author: FuzzyCat444 on Github.com
// Date: 02/26/2023 (M/D/Y)
// Link: https://github.com/FuzzyCat444/BCL-Cube/blob/main/cube.bcl
// Description:
//   A modernized version of the console_cube program.
//   This version uses more modern BCL syntax, features, etc.
// ==================================================================
import stdlib::*;
import math::*;

define main() {
    screen : bool[60][45] = [[false; 60]; 45];
    vertices : f32[3][8] = [
        [1.0, -1.0, -1.0],
        [-1.0, -1.0, -1.0],
        [-1.0, 1.0, -1.0],
        [1.0, 1.0, -1.0],
        [1.0, -1.0, 1.0],
        [-1.0, -1.0, 1.0],
        [-1.0, 1.0, 1.0],
        [1.0, 1.0, 1.0]
    ];
    edges : i32[2][12] = [
        [0, 1],
        [1, 2],
        [2, 3],
        [3, 0],
        [0, 4],
        [1, 5],
        [2, 6],
        [3, 7],
        [5, 4],
        [4, 7],
        [7, 6],
        [6, 5]
    ];

    x_rot : f32 = 0;
    y_rot : f32 = 0;

    while true {
        x_rot += 0.02;
        y_rot += 0.005;

        screen = [[false; 60]; 45];

        edge_i : i32 = 0;
        while edge_i < 12 {
            edge : i32[2] = edges[edge_i];
            v1 : f32[3] = vertices[edge[0]];
            v2 : f32[3] = vertices[edge[1]];

            xr = 3.0 * sin(x_rot);
            yr = 10.0 * cos(y_rot);
            v1 = rotate_x(v1, xr);
            v2 = rotate_x(v2, xr);
            v1 = rotate_y(v1, yr);
            v2 = rotate_y(v2, yr);

            v1 = translate(v1, [0.0, 0.0, -3.0]);
            v2 = translate(v2, [0.0, 0.0, -3.0]);

            v1p = project(v1, 1.0);
            v2p = project(v2, 1.0);

            v1sc = screen_coords(v1p, 60, 45);
            v2sc = screen_coords(v2p, 60, 45);

            screen = line(screen, v1sc[0], v1sc[1], v2sc[0], v2sc[1]);

            edge_i += 1;
        }

        display(screen);

        usleep(32000);
    }
}

define display(screen : bool[60][45]) {
    println();
    println();
    row : i32 = 0;
    while row < 45 {
        println();
        column : i32 = 0;
        while column < 60 {
            if screen[row][column] {
                print("▓▓");
            } else {
                print("░░");
            }
            column += 1;
        }
        row += 1;
    }
}

define line(screen : bool[60][45], x1 : i32, y1 : i32, x2 : i32, y2 : i32) -> bool[60][45] {
    new_screen : bool[60][45] = screen;
    dx : i32 = x2 - x1;
    dy : i32 = y2 - y1;
    x_incr : i32 = sign(dx);
    y_incr : i32 = sign(dy);
    a : i32 = 0;
    b : i32 = 0;
    a_max : i32 = abs(dy);
    b_max : i32 = abs(dx);
    ab_incr : i32 = abs(dy);
    if abs(dy) > abs(dx) {
        ab_incr = abs(dx);
    }

    px : i32 = x1;
    py : i32 = y1;
    ex : i32 = x2 + x_incr;
    ey : i32 = y2 + y_incr;
    while px != ex and py != ey {
        if px >= 0 and px < 60 and py >= 0 and py < 45 {
            new_screen[py][px] = true;
        }
        a += ab_incr;
        b += ab_incr;
        if a >= a_max {
            a -= a_max;
            px += x_incr;
        }
        if b >= b_max {
            py += y_incr;
            b -= b_max;
        }
    }

    return new_screen;
}

define translate(point : f32[3], amount : f32[3]) -> f32[3] {
    x : f32 = point[0] + amount[0];
    y : f32 = point[1] + amount[1];
    z : f32 = point[2] + amount[2];
    return [x, y, z];
}

define rotate_x(point : f32[3], amount : f32) -> f32[3] {
    c : f32 = cos(amount);
    s : f32 = sin(amount);
    x : f32 = point[0];
    y : f32 = c * point[1] - s * point[2];
    z : f32 = s * point[1] + c * point[2];
    return [x, y, z];
}

define rotate_y(point : f32[3], amount : f32) -> f32[3] {
    c : f32 = cos(amount);
    s : f32 = sin(amount);
    x : f32 = s * point[2] + c * point[0];
    y : f32 = point[1];
    z : f32 = c * point[2] - s * point[0];
    return [x, y, z];
}

define project(point : f32[3], p : f32) -> f32[2] {
    pd : f32 = 1.0 / (-1 * point[2] * p);
    x : f32 = point[0] * pd;
    y : f32 = point[1] * pd;
    return [x, y];
}

define screen_coords(point : f32[2], width : i32, height : i32) -> i32[2] {
    aspect : f32 = width;
    aspect /= height;
    x : i32 = width * (point[0] + 1) / 2;
    y : i32 = height * (-aspect * point[1] + 1) / 2;
    return [x, y];
}
