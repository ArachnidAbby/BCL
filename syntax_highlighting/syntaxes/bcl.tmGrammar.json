{
    "scopeName": "source.bcl",
    "patterns": [{ "include": "#expression" }],
    "repository": {
      "expression": {
        "patterns": [
            { "include": "#comment" },
            { "include": "#constants" },
            { "include": "#userDefined" },
            { "include": "#keywords" },
            { "include": "#punctuation" },
            { "include": "#string" }
        ]
      },

      "keywords": {
        "patterns": [
          {
            "match": "(?<!define\\s+)[a-zA-Z0-9_]+(?=\\(.*\\))",
            "name": "meta.function-call.generic.bcl"
          },
          {
            "match": "((if)|(else)|(for)|(while)|(import)|(return))",
            "name": "keyword.control.bcl"
          },
          {
            "match": "(define)",
            "name": "storage.type.function"
          },
          {
            "match": "((or)|(and)|(not)|(in))",
            "name": "keyword.operator.bcl"
          },
          {
            "match": "((i8)|(i16)|(i32)|(i64)|(f64)|(f128)|(bool)|(char)|(string)|(str))",
            "name": "storage.type.bcl"
          },
          {
            "match": "((break)|(continue))",
            "name": "keyword.control.flow.bcl"
          },
          {
            "match": "([a-zA-Z0-9_]+)|(\\s+)",
            "name": "source.bcl"
          }
        ]
      },

      "string": {
        "match": "([\"'])(?:(?=(\\\\?))\\2.)*?\\1",
        "name": "string.quoted.double.bcl"    
      },

      "userDefined": {
        "patterns": [
          {
            "match": "(?<=define\\s*)[a-zA-Z0-9_]+",
            "name": "entity.name.function.bcl"
          },
          {
            "match": "(?<=([,\\(]))\\s*([\\w\\d_]+(?=\\s*\\:))",
            "name": "variable.parameter.function.bcl"
          }
        ]
      },

      "comment": {
        "match": "//.*$",
        "name": "comment.line.double-slash.bcl"
      },

      "punctuation": {
        "patterns": [
          {"match":"(\\->)|\\:", "name": "punctuation.separator.annotation.result.bcl"},
          {
            "match": "(==)|(>=)|(<=)|(!=)|>|<",
            "name": "keyword.operator.comparison.bcl"
          },
          {
            "match": "(\\+=)|(\\-=)|(\\*=)|(/=)|(=)",
            "name": "keyword.operator.assignment.bcl"
          },
          {
            "match": "[\\+\\-\\*\\/\\%\\&]",
            "name": "keyword.operator.arithmetic.bcl"
          },
          
          {"match": "[;]", "name": "punctuation.terminator.statement.bcl"},
          {"match": "[,]", "name": "punctuation.seperator.bcl"},
          {
            "begin": "\\(",
            "end": "\\)",
            "beginCaptures": {
              "0": { "name": "punctuation.parenthesis.start.bcl" }
            },
            "endCaptures": {
              "0": { "name": "punctuation.parenthesis.end.bcl" }
            },
            "patterns": [{ "include": "#expression" }]
          },
          {
            "match": "[\\{\\}]",
            "name": "punctuation.definition.block.bcl"
          },
          {"match":"[\\.]", "name": "punctuation.separator.period.end.bcl"}
        ]
      },

      "constants": {
        "patterns": [
          {"match": "\\d+((\\.\\d+f)|(\\.\\d+)|f)", "name": "constant.numeric.bcl"},
          {"match": "\\d+", "name": "constant.numeric.bcl"},
          {
            "match": "(true)|(false)|(none)",
            "name": "constant.language.bcl"
          }
        ]
      }
  }
}