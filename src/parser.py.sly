import sly
from ast import Number, Sum, Sub, Print, Println, parenth
import lexer


class Parser(sly.Parser):
    tokens = lexer.Lexer.tokens

    def __init__(self, module, builder, printf):
        self.module = module
        self.builder = builder
        self.printf = printf

    @_('OPEN_PAREN express CLOSE_PAREN')
    def paren(self, p):
        print(p)
        return parenth(p[1])
    
    @_('PRINT paren SEMI_COLON')
    def func(self,p):
        if p[0]=="print":
            return Print(self.builder, self.module, self.printf, p[1])
        else:
            return Println(self.builder, self.module, self.printf, p[1])

    @_('NUMBER')
    def express(self, p):
        return Number(self.builder, self.module, p[0])

    @_('express SUM express')
    def express(self,p):
        left = p[0]
        right = p[2]
        operator = p[1]
        return Sum(self.builder, self.module, left, right)
    
    @_('express SUB express')
    def express(self,p):
        left = p[0]
        right = p[2]
        operator = p[1]
        return Sub(self.builder, self.module, left, right)

    def get_parser(self):
        return self.pg.build()

# class CustomParser:
#     def __init__(self, builder, module, printf):
#         self.builder = builder
#         self.module = module
#         self.printf = printf
#         self.things = [
#             [2, self.function] #[len,function]
#         ]
    
#     def function(self,tokens)