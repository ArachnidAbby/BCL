// ==================================
// Created: 02/26/2023
// description:
//   This is the Standard library of BCL
//   It contains all the basic functionality you may desire
//   such as println, print, sleep, usleep, etc.
// ===================================
// WARNINGS:
// Direct Usage of printf will not do any kind of fancy
// compile-time checks. Be careful when passing things in.

import optional::*;

// EXTERNAL DEFINITIONS
public define printf(x: strlit, ...);
public define puts(data: strlit);

public define memcpy(dest: UntypedPointer, source: UntypedPointer, size: size_t) -> UntypedPointer;
public define memmove(dest: UntypedPointer, source: UntypedPointer, size: size_t) -> UntypedPointer;
public define malloc(size: size_t) -> UntypedPointer;
public define free(ptr: UntypedPointer);
public define strnlen(str: strlit, max: size_t) -> size_t;

/// This is unsafe. Don't use it directly
/// Eventually it will be moved too.
// output is actually ssize_t, but the language doesn't have that. I should add it.
public define read(file_descriptor: i32, buffer: UntypedPointer, count: size_t) -> i64;


public define random() -> i32;
public define srandom(seed: i32);


//  PRINTLN()
public define println(x: i32) {
    printf("%i\n", x);
}

public define println(x: i64) {
    printf("%lld\n", x);
}

public define println(x: u64) {
    printf("%llu\n", x);
}

public define println(x: UntypedPointer) {
    printf("%llu\n", x);
}

public define println(x: bool) {
    if x {
        puts("true");
    } else {
        puts("false");
    }
}

public define println(x: f32) {
    printf("%F\n", x as f64);
}

public define println(x: f64) {
    printf("%F\n", x);
}

public define println(x: char) {
    printf("%c\n", x);
}

public define println(x: strlit) {
    puts(x);
}

public define println() {
    puts("");
}


// PRINT()
public define print(x: i32) {
    printf("%i", x);
}

public define print(x: i64) {
    printf("%lli", x);
}

public define print(x: bool) {
    if x {
        printf("%s", "true");
    } else {
        printf("%s", "false");
    }
}

public define print(x: f32) {
    printf("%f", x as f64);
}

public define print(x: f64) {
    printf("%f", x);
}

public define print(x: char) {
    printf("%c", x);
}

public define print(x: strlit) {
    printf("%s", x);
}


// SLEEP FUNCTIONS
public define usleep(microsec: i32);
public define sleep(seconds: i32);

// EXIT
public define exit(exit_code: i32);
public define exit();

// opaque FILE type used in C.
public struct File {
    fp: size_t; // random data, we can't make empty types yet.

    public define is_null(&self) -> bool {
        return *(self as UntypedPointer as &size_t) == 0;
    }
}

public define fopen(filename: strlit, mode: strlit) -> &File;
public define fclose(file: &File) -> i32;

// std C get char from file
public define fgetc(fp: &File) -> char;

// get till next line, or buffer size reached
define fgets(buffer: strlit, max_len: i32, fp: &File) -> i64;
public define fgets(fp: &File, buffer: strlit) -> i64 {
    return fgets(buffer, buffer.length as i32, fp);
}

// DEBUGGING

// define main() {
//     println(12);
//     println(true);
//     println(false);
//     println(12.3f);
//     println('h');
//     println("hi");

//     print(12);
//     print(true);
//     print(false);
//     print(12.3f);
//     print('h');
//     print("hello");

//     println();
// }