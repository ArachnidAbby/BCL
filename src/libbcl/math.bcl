// ======================================
// created: 02/26/2023
// description:
//   A simple math library with a few basic functions
// additional credits:
//   - FuzzyCat444 on Github.com (for many of the trig functions)
// ======================================


define max(x: i32, y:i32) -> i32 {
    if x>y { return x; }
    return y;
}

define max(x: f32, y:f32) -> f32 {
    if x>y { return x; }
    return y;
}


define min(x: i32, y:i32) -> i32 {
    if x<y { return x; }
    return y;
}

define min(x: f32, y:f32) -> f32 {
    if x<y { return x; }
    return y;
}


define factorial(num: i32) -> i32{
    if num > 1 {
        return num * factorial(num-1);
    }
    return num;
}


define pow(x: i32, pow: i32) -> i32 {
    for i in 1..pow {
        x *= x;
    }
    return x;
}

define pi() -> f32 {
    return 3.14159265359;
}


define two_pi() -> f32 {
    return 6.28318545718;
}


define half_pi() -> f32 {
    return 1.57079632679;
}


define sin(x_ : f32) -> f32 {
    x : f32 = fmod(x_, two_pi());
    quadrant : i32 = 0;
    if x < half_pi() {
        quadrant = 0;
    } else if x < pi() {
        x = pi() -  x;
        quadrant = 1;
    } else if x < 3 * half_pi() {
        x = x - pi();
        quadrant = 2;
    } else {
        x = two_pi() - x;
        quadrant = 3;
    }

    x2 : f32 = x * x;
    x3 : f32 = x2 * x;
    x5 : f32 = x2 * x3;
    x7 : f32 = x2 * x5;
    y : f32 = x - x3 / 6 + x5 / 120 - x7 / 5060;

    if quadrant < 2 {
        return y;
    }
    return -1 * y;
}


define cos(x : f32) -> f32 {
    return sin(x + half_pi());
}


define fmod(x : f32, y : f32) -> f32 {
    quotient : f32 = x / y;
    iquotient : i32 = quotient;

    remainder : f32 = fabs(x) - fabs(y * iquotient);
    if x < 0 {
        remainder = fabs(y) - remainder;
    }
    if y < 0 {
        remainder *= -1;
    }
    return remainder;
}

define fabs(x : f32) -> f32 {
    if x < 0 {
        return -1 * x;
    }
    return x;
}


define abs(x : i32) -> i32 {
    if x < 0 {
        return -1 * x;
    }
    return x;
}


define sign(x : i32) -> i32 {
    if x < 0 {
        return -1;
    }
    return 1;
}