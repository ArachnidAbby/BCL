import stdlib;

struct inner_Box::<T> {
    data: T,
    ref_count: i64;
}

public struct Box::<T> {
    inner: UntypedPointer; // &inner_Box::<T>
    // ref_count: UntypedPointer, // &i64 (signed in case the count goes negative)

    public define new(data: T) -> Box::<T> {
        inner_ptr = stdlib::malloc(inner_Box::<T>::SIZEOF);
        inner_data = inner_Box::<T> {
            data: data,
            ref_count: 1i64
        };

        inner_ptr.store(&inner_data);

        x = Box::<T> {
            inner: inner_ptr
        };
        // stdlib::println("wonkers");

        return x;
    }

    public define unwrap(self) -> T {
        inner_data = self.inner as &inner_Box::<T>;
        if *inner_data.ref_count<=0 {
            stdlib::println("\u001b[31mInvalid ref-count, this is impossible!?!\u001b[0m");
        }

        return inner_data.data;
    }

    public define wrap(&self, data: T) {
        inner_data = self.inner as &inner_Box::<T>;

        if *inner_data.ref_count<=0 {
            stdlib::println("\u001b[31mInvalid ref-count, this is impossible!?!\u001b[0m");
        }

        *inner_data.data = data;
    }

    // public because of some dumb reasons that are necessary for op overloading
    // will fix soon
    /// Do not execute manually, breaks safety
    public define __increase_ref_count__(&self) {
        inner_data = self.inner as &inner_Box::<T>;
        *inner_data.ref_count += 1i64;
        self.inner.retake(&inner_data);
        // stdlib::print("increasing, ref count: ");
        // stdlib::println(*inner_data.ref_count);
    }

    /// Do not execute manually, breaks safety
    public define __dispose__(&self) {
        inner_data = self.inner as &inner_Box::<T>;
        *inner_data.ref_count -= 1i64;
        // stdlib::print("diposing, ref count:");
        // stdlib::println(*inner_data.ref_count);
        self.inner.release(&inner_data);

        if *inner_data.ref_count <= 0 {
            // self.data.release(self.data as &T);
            stdlib::free(self.inner);
            stdlib::println("Removed");
        }
    }
}